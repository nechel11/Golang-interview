Каналы в Golang

	"Что такое channel?" https://www.youtube.com/watch?v=ZTJcaP4G4JM&list=LL&index=1&t=52s
		channel - это абстракция Go, 
		которая помогает горутинам общаться друг с другом, 
		передавая по channel значения.
		Канал можно представить как трубу, 
		в которую одни горутины кладут данные, а другие их вычитывают.

	"Что такое буферизированный и небуферизированный channel?"
		Типы каналов :
		буфферизированный - c := make(chan int, 10) - будет принимать 10 значений, потом станет в стоп
		небуфферизированный c := make(chan int) станет в стоп после 1 принятоного значения
	
	"Какие действия можно произвести с каналом?"
		* создать канал
		* записать в канал
		* вычитать из канала
		* закрыть канал
	
	"Что будет если писать/читать в nil channel?"
		deadlock and fatal error
	
	"Что будет если писать/читать в/из закрытый channel?"
		запись в закрытый - паника.
		читать - можно

	"Что будет если писать/читать в/из буферизированный channel?"
		запись - можно, пока не заполнится буфер. затем лок канала
		чтение - можно, будет читать пока не прочтет весь буфер

	"Что будет если писать/читать в/из небуферизированный channel?"
		Небуферизированный канал - это тот же буферизированный канал, 
		но с nil буфером. Соответственно принцип его работы будет таким же. 
		Чтение из пустого и запись в непустой небуферизированный канал являются блокирующими операциями.
	
	"Как закрыть channel? Что с ним происходит?"
		Для закрытия канала предусмотрена функция close. Если упрощенно (опускаем блокировки), то при закрытии канала происходят следующие действия:
		проверка, что канал инициализирован и не является nil (panic - если это не так);
		проверка, что канал не закрыт (panic - если это не так);
		поле closed hchan выставляется в 1 (true);
		отправка всем ожидающим чтения default value типа данных в канале;
		ожидающие записи получают panic. Интересный момент, что так как закрытие канала не блокирует чтение канала, то данные из буфера канала можно вычитать и после его закрытия.
	
	