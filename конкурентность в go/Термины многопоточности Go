Конкурентность — это выполнение задач за определённое время (например, есть 5 процессов и все они в сумме выполняются в течение 60 минут по очереди). 
Важная деталь заключается в том, что задачи необязательно выполняются одновременно, поэтому их можно разделить на более мелкие и чередующиеся. 
Проведём аналогию: шеф-повар нарезает лук и иногда проверяет духовку. Ему нужно прекратить нарезать лук, чтобы подойти к духовке, 
а затем снова начать нарезать и повторять этот процесс до конца приготовления блюда.

Параллелизм — это выполнение задач в одно и то же время (например, есть 5 задач, каждая из них выполняется в течение 60 минут). 
Само название подразумевает, что они выполняются параллельно.
Вернёмся на кухню: теперь у нас есть два шеф-повара. Один следит за духовкой, 
а второй нарезает лук. Работа разделена, так как теперь на кухне трудятся два повара.

____________________________________________

Горутина - легковесный поток
Преимущества горутин:

    Они легковесны.
    Легко и без проблем масштабируют.
    Они — практически потоки.
    Требуют меньше памяти (2KB).
    Предоставляют дополнительную память горутинам во время выполнения.

Отличия горутин от потоков (https://backendinterview.ru/golang/concurrency/gouritine)  : 

   * Каждый поток операционной системы имеет блок памяти фиксированного разме­ра (зачастую до 2 Мбайт) для стека — рабочей области, 
   в которой он хранит локальные переменные вызовов функций, 
   находящиеся в работе или приостановленные на время вызова другой функции. 
   В противоположность этому go-подпрограмма начинает работу с небольшим стеком, обычно около 2 Кбайт. 
   Стек go-подпрограммы, подобно стеку потока опе­рационной системы, хранит локальные переменные активных и приостановленных функций, 
   но, в отличие от потоков операционной системы, не является фиксирован­ным; при необходимости он может расти и уменьшаться. 
   Максимальный размер стека go-подпрограммы может быть около 1 Гбайта, на порядки больше типичного стека с фиксированным размером, 
   хотя, конечно, такой большой стек могут использовать только несколько go-подпрограмм.

	* Потоки операционной системы планируются в ее ядре, 
    а у go есть собственный планировщик (m:n) мультиплексирующий(раскидывающий) горутинки(m) по потокам(n). 
    Основной плюс = отсуствие оверхеда на переключение контекста.
	
	* Планировщик Go использует параметр с именем GOMAXPROCS для определения, 
    сколько потоков операционной системы могут одновременно активно выполнять код Go. 
    Его значение по умолчанию равно количеству процессоров компьютера, 
    так что на машине с 8 процессорами планировщик будет планировать код Go для выполне­ния на 8 потоках одновременно 
    (GOMAXPROCS равно значению п в т:п-планировании). Спящие или заблокированные в процессе коммуникации go-подпрограммы потоков для себя не требуют. 
    Go-подпрограммы, заблокированные в операции ввода-вывода или в других системных вызовах, или при вызове функций, не являющихся функция­ми Go, 
    нуждаются в потоке операционной системы, но GOMAXPROCS их не учитывает.

	* В большинстве операционных систем и языков программирования, поддержива­ющих многопоточность, текущий поток имеет идентификацию, 
    которая может быть легко получена как обычное значение (обычно — целое число или указатель). 
    Это облегчает построение абстракции, именуемой локальной памятью потока, которая, по существу, 
    является глобальным отображением, использующим в качестве ключа идентификатор потока, 
    так что каждый поток может сохранять и извлекать значения независимо от других потоков. 
    У горутин нет идентификации, доступной программисту. Так решено во время проектирования языка, 
    поскольку локальной памятью потока про­граммисты злоупотребляют.

____________________________________________

Каналы  обеспечивают возможность общения нескольких горутин друг с другом, чтобы синхронизировать их выполнение.
Типы каналов :
    буфферизированный - c := make(chan int, 10) - будет принимать 10 значений, потом станет в стоп
    небуфферизированный c := make(chan int) станет в стоп после 1 принятоного значения




