Замыкание в Golang

	Основы Go: замыкания (closures)
	В Go функции могут быть замыканиями (closures). 
	Замыкание - это функция, которая ссылается к переменным вне ее тела. 
	Функция имеет доступ к связанным переменным, а также может присваивать им значения; в этом смысле функция "связана" с этими переменными.

	В следующем примере функция adder возвращает замыкание. Каждое замыкание связано со своей собственной переменной sum.

	3

________
Замыкание (closure) в Go - это функция, которая ссылается на переменные из внешней области видимости.
Когда функция ссылается на переменные из внешней области видимости,
она сохраняет эти переменные в своём замыкании,
что позволяет ей обращаться к ним позже, даже если они были вышедши из области видимости.

Пример:

func closureExample() func() int {
    i := 0
    return func() int {
        i++
        return i
    }
}

func main() {
    nextInt := closureExample()

    fmt.Println(nextInt()) // 1
    fmt.Println(nextInt()) // 2
    fmt.Println(nextInt()) // 3
}


В этом примере функция closureExample возвращает замыкание,
которое увеличивает и возвращает переменную i при каждом вызове.
Когда closureExample вызывается в main, она возвращает замыкание,
которое ссылается на переменную i. Каждый раз, когда nextInt вызывается,
оно увеличивает переменную i и возвращает её новое значение.